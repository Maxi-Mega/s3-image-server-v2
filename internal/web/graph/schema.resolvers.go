package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/Maxi-Mega/s3-image-server-v2/internal/types"
)

// Objects is the resolver for the Objects field.
func (r *geonamesResolver) Objects(ctx context.Context, obj *types.Geonames) ([]interface{}, error) {
	panic(fmt.Errorf("not implemented: Objects - Objects"))
}

// AdditionalFiles is the resolver for the AdditionalFiles field.
func (r *imageResolver) AdditionalFiles(ctx context.Context, obj *types.Image) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: AdditionalFiles - AdditionalFiles"))
}

// TargetFiles is the resolver for the TargetFiles field.
func (r *imageResolver) TargetFiles(ctx context.Context, obj *types.Image) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: TargetFiles - TargetFiles"))
}

// FullProductFiles is the resolver for the FullProductFiles field.
func (r *imageResolver) FullProductFiles(ctx context.Context, obj *types.Image) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: FullProductFiles - FullProductFiles"))
}

// Corner is the resolver for the Corner field.
func (r *localizationResolver) Corner(ctx context.Context, obj *types.Localization) (interface{}, error) {
	panic(fmt.Errorf("not implemented: Corner - Corner"))
}

// GetAllImageSummaries is the resolver for the getAllImageSummaries field.
func (r *queryResolver) GetAllImageSummaries(ctx context.Context, from *time.Time, end *time.Time) (types.AllImageSummaries, error) {
	// return types.AllImageSummaries{"group": {"type": []types.ImageSummary{{Name: "image"}}}}, nil
	return r.Cache.GetAllImages(), nil
}

// GetImage is the resolver for the getImage field.
func (r *queryResolver) GetImage(ctx context.Context, bucket string, name string) (*types.Image, error) {
	return &types.Image{}, nil
}

// Geonames returns GeonamesResolver implementation.
func (r *Resolver) Geonames() GeonamesResolver { return &geonamesResolver{r} }

// Image returns ImageResolver implementation.
func (r *Resolver) Image() ImageResolver { return &imageResolver{r} }

// Localization returns LocalizationResolver implementation.
func (r *Resolver) Localization() LocalizationResolver { return &localizationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type geonamesResolver struct{ *Resolver }
type imageResolver struct{ *Resolver }
type localizationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
